import datetime

from cogs import error, user, slicer, collection

from cogs import numberDecoder

from systems.group.commands.log import get_log
from systems.group.handler_rates import (
	rates_types_chit_not_chit,
	rates_coefficient,
	rates_types_int,
	rates_types
)

import random


max_logs_elem = 20


async def add_log(message, ball):
	if not message.chat.id in collection.log_db:
		collection.log_db[message.chat.id] = {
			"id": message.chat.id,
			"uptime": "",
			"logs": []
		}

	elif len(collection.log_db[message.chat.id]["logs"]) >= max_logs_elem:
		del collection.log_db[message.chat.id]["logs"][0]
	
	collection.log_db[message.chat.id]["logs"].append(str(ball))
	collection.log_db[message.chat.id]["uptime"] = str(datetime.datetime.now())


async def thumbnail_in_output_message(output_message, checker_and_zero):
	output = output_message
	
	if checker_and_zero == 1:
		output += "\n\nüí¨ –¢–æ–º—É –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ç–∞–≤–∫—É –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã –µ–≥–æ —Å—Ç–∞–≤–∫–∏"
	
	elif checker_and_zero > 1:
		output += "\n\nüí¨ –î—Ä—É–≥–∏–º –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ç–∞–≤–∫–∏, –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã –∏—Ö —Å—Ç–∞–≤–æ–∫"

	return output


async def add_in_output_message(output_message, checker, winner_users):
	if checker != 0 and int(checker[0]) in collection.users_db:
		user_object = await user.get_object_user(int(checker[0]))
		
		if not int(checker[0]) in winner_users:
			if len(checker) != 6:
				output_message += "\n{} <a href=\"{}\">{}</a> <code>></code> {} [{}]".format(
					checker[3],
					await user.get_link_user(user_object["username"], user_object["id"]),
					await slicer.slicer(
						await user.get_name_user(user_object["first_name"], user_object["username"], user_object["id"]), 13
					),
					await numberDecoder.space_decoder(checker[2]),
					checker[4]
				)
	
			user_object["b"] = str(int(user_object["b"]) + checker[2])
			
			winner_users.append(int(checker[0]))

		elif int(checker[0]) in winner_users:
			user_object["b"] = str(int(user_object["b"]) + checker[1])

	return output_message, winner_users


async def add_money_winner(message):
	ball = random.randint(1, 37)

	output_message, checker_and_zero, winner_users = "–†—É–ª–µ—Ç–∫–∞: {} {}".format(
		await get_log(ball), ball
	), 0, []

	for rates in collection.roulette_db[message.chat.id]["rates"]:
		list_rates, checker, = rates[2].split("-"), 0

		if not int(ball) in rates_types_int[3]:  # –µ—Å–ª–∏ –≤—ã–ø–∞–ª –Ω–µ 0 "–Ω–µ –∑–µ–ª—ë–Ω–æ–µ"
			if len(list_rates) > 1 and str(ball) in list_rates:  # –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ —Å—Ç–∞–≤–∫–∞—Ö –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ
				checker = [rates[0], int(rates[1]), int(int(rates[1]) * rates_coefficient[len(list_rates)]), "x{}".format(
					rates_coefficient[len(list_rates)]
				), "–Ω–∞ {}-{}".format(
					list_rates[0], list_rates[-1]
				)]
	
			elif len(list_rates) == 1 and str(list_rates[0]).isdigit() and int(list_rates[0]) == ball:  # –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ –Ω–∞ –æ–¥–Ω–æ —á–∏—Å–ª–æ
				checker = [rates[0], int(rates[1]), int(rates[1]) * rates_coefficient[1], "x{}".format(
					rates_coefficient[1]
				), "–Ω–∞ {}".format(
					list_rates[0]
				)]
	
			elif len(list_rates) == 1 and rates[2] in rates_types[1] and int(ball) in rates_types_int[1]:  # –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –∫—Ä–∞—Å–Ω–æ–º
				checker = [rates[0], int(rates[1]), int(rates[1]) * 2, "x2", "–Ω–∞ –∫—Ä–∞—Å–Ω—ã–π"]
			
			elif len(list_rates) == 1 and rates[2] in rates_types[2] and int(ball) in rates_types_int[2]:  # –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ —á—ë—Ä–Ω–æ–º
				checker = [rates[0], int(rates[1]), int(rates[1]) * 2, "x2", "–Ω–∞ —á—ë—Ä–Ω—ã–π"]
			
			elif len(list_rates) == 1 and rates[2] in rates_types_chit_not_chit[1] and int(ball) % 2 == 0:  # –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ —á—ë—Ç–Ω–æ–º
				checker = [rates[0], int(rates[1]), int(rates[1]) * 2, "2", "–Ω–∞ —á—ë—Ç–Ω–æ–µ"]
			
			elif len(list_rates) == 1 and rates[2] in rates_types_chit_not_chit[2] and int(ball) % 2 != 0:  # –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –Ω–µ—á—ë—Ç–Ω–æ–º
				checker = [rates[0], int(rates[1]), int(rates[1]) * 2, "2", "–Ω–∞ –Ω–µ—á—ë—Ç–Ω–æ–µ"]

		elif len(list_rates) == 1 and rates[2] in rates_types[3] + [str(i) for i in rates_types_int[3]]:  # –µ—Å–ª–∏ –≤—ã–ø–∞–ª 0 –∏ —Å—Ç–∞–≤–∫–∞ —Ç–æ–∂–µ –±—ã–ª–∞ –Ω–∞ –Ω–µ–≥–æ 0
			checker = [rates[0], int(rates[1]), int(rates[1]) * 35, "x35", "–Ω–∞ –∑–µ–ª—ë–Ω—ã–π"]
		
		else:  # –µ—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞ –Ω–æ–ª—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫—É –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–∞–≤–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞ 0
			checker = [rates[0], int(rates[1]), int(int(rates[1]) / 2), "x35", "–Ω–∞ –∑–µ–ª—ë–Ω—ã–π", 0]  # 0 –≤ –∫–æ–Ω—Ü–µ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å —ç—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
			checker_and_zero += 1

		output_message, winner_users = await add_in_output_message(output_message, checker, winner_users)  # –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–π–≥—Ä—ã—à–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

	await add_log(message, ball)
	
	return await thumbnail_in_output_message(output_message, checker_and_zero)


async def main(message, message_text, numeration_command):
	usage = await error.check_errors(message, message_text, {
		"block_arguments": True,
		"commands": numeration_command
	})
	
	if usage[0] == 1:
		if message.chat.id in collection.roulette_db:
			if message.from_user.id in [int(rates[0]) for rates in collection.roulette_db[message.chat.id]["rates"]]:
				output = await add_money_winner(message)
			
				del collection.roulette_db[message.chat.id]
			else:
				output = "üö´ –°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, –ø–æ—Ç–æ–º –∫—Ä—É—Ç–∏"
		else:
			output = "üö´ –ù–µ—Ç—É —Å—Ç–∞–≤–æ–∫ —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å"
		
		try:
			await message.reply(output, parse_mode="HTML", disable_web_page_preview=True)
		except Exception as exception:
			await message.reply("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä—É–ª–µ—Ç–∫–æ–π: {}üí¨\n–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –±—ã–ª–∏ –∑–∞—Å—á–∏—Ç–∞–Ω—ã".format(
				exception
			))
	else:
		await error.send_errors(message, usage)
